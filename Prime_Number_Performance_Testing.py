#!/usr/bin/env/python3
"""Test the speeds of various methods, of testing whether numbers are prime or not"""

import time
import sympy
from numba import jit

n = int(1e7)         #How many numbers to test

lower_bound = int(1e6)        #The lower bound to start at (useful to seeing how much longer higher order numbers take)
upper_bound = n + lower_bound

arrayOfPrimes = [None]      #Used to hold the numbers for seive of eratosthenes



@jit(nopython=True, parallel=True)
def isItPrime(num):
    """Manual method for testing individual numbers for prime.  Returns True or False"""

    if ((num == 0) or (num == 1)):
        return False

    if num == 2:
        return True

    for i in range(3, int(num**0.5)+1, 2):
        if num%i == 0:
            return False

    return True



@jit(nopython=True, parallel=True)
def SeiveEratosthenes(n, arrayOfPrimes):
    """Take a number n, and the variable listOfPrimes,
    generate and seive the listOfPrimes up to n, and
    return the seived listOfPrimes, in a True/False array.
    Call using if(arrayOfPrimes[num] == True)"""

    arrayOfPrimes = [True]*n

    for i in range(2, len(arrayOfPrimes)):
        if arrayOfPrimes[i] == True:
            for j in range(i, len(arrayOfPrimes), i):
                arrayOfPrimes[j] = False

    return(arrayOfPrimes)






print('The following performance tests all test {} numbers, from {} to {}'.format(n, lower_bound, upper_bound))


###Test 1 - Time for isItPrime()
t1 = time.time()

for i in range(lower_bound, upper_bound):
    isItPrime(i)

print('The time for isItPrime to test {} numbers from {} to {}, took {} seconds'.format(n, lower_bound, upper_bound, round(time.time()-t1,4)))

      

###Test 2 - Equivalent time for sympy.isprime()
t2 = time.time()

for i in range(lower_bound, upper_bound):
    sympy.isprime(i)


print('The time for sympy.isprime() to test {} numbers from {} to {}, took {} seconds'.format(n, lower_bound, upper_bound, round(time.time()-t2,4)))



###Test 3 - Build a seive of primes using SeiveEratosthenes()
t3 = time.time()

arrayOfPrimes = SeiveEratosthenes(upper_bound, arrayOfPrimes)

print('The time to generate a Sieve of Eratosthenes up to {}, took {} seconds'.format(upper_bound, round(time.time()-t3,4)))



###Test 4 - Test membership of numbers in arrayOfPrimes (the list generated by Sieve of Eratosthenes)
t4 = time.time()

for i in range(lower_bound, upper_bound):
    if(arrayOfPrimes[i] == True):
        pass

print('The time to test membership of {} numbers in arrayOfPrimes (the list generated by Sieve of Eratosthenes), from {} to {}, took {} seconds'.format(n, lower_bound, upper_bound, round(time.time()-t4,4)))



###Test 5 - Convert arrayOfPrimes (the list generated by Sieve of Eratosthenes) generated in from Test 3 into a set
t5 = time.time()

prime_set = {None}

for i in range(len(arrayOfPrimes)):
    if arrayOfPrimes[i] == True:
        prime_set.add(i)

print('The time to convert arrayOfPrimes (the list generated by Sieve of Eratosthenes) to a set, took {} seconds'.format(round(time.time()-t5,4)))        



###Test 6 - Test membership of numbers in prime_set (the set generated in Test #5, from the list generated by Sieve of Eratosthenes)
t6 = time.time()

for i in range(lower_bound, upper_bound):
    if i in prime_set:
        pass

print('The time to test membership of {} numbers in prime_set (the set generated by Sieve of Eratosthenes), from {} to {}, took {} seconds'.format(n, lower_bound, upper_bound, round(time.time()-t4,4)))




###Test X - See if jit speeds up isItPrime() and sympy.isPrime() the same amount, of if sympy is already optimized




###Conclusions:

#July 15 2019:

#1. The function isItPrime() is fookin slow, taking 7.6 seconds per 1 million tests.  sympy.isprime(), is 3 times faster.  Using isItPrime() 
#2. Generating the Sieve of Eratosthenes and converting it to a set is quite quick, and only takes 0.6 seconds for every 1000000 numbers.
#3. Not necessary to convert Sieve of Eratosthenes into a set, it is already fast as a list.  Because the list is already ordered, its lookup is O(1).
#4. The lookup times in a list are 0.124 seconds for per million numbers, and the lookup times in a set are 0.454 seconds per million numbers.
#5. Always use jit where possible
#6. The fastest method to test for prime is by using jit to generate a seive of eratosthenes, then check membership in the list (not set).
#       Method (A): isItPrime() w/o jit                                 = 76s per 10 million values
#       Method (B): sympy.isPrime()                                     = 24.6s per 10 million values
#       Method (B): isItPrime() w/ jit                                  = 14.3s per 10 million values
#       Method (C): Seive of Erathosthenes, w/o jit converted to set    = 6.8s per 10 million values
#       Method (D): Seive of Erathosthenes, w/ jit converted to set     = 5.3s per 10 million values
#       Method (E): Seive of Erathosthenes, w/jit as a list/byte array  = 1.54s per 10 million values


#Performance Test Results:
#The following performance tests all test 1000000 numbers, from 1000000 to 2000000
#Test 1A - The time for isItPrime to test 1000000 numbers from 1000000 to 2000000, took 7.6066 seconds
#Test 1B - The time for isItPrime to test 1000000 numbers from 1000000 to 2000000, took 1.1331 seconds (when using jit)
#Test 2 - The time for sympy.isprime() to test 1000000 numbers from 1000000 to 2000000, took 2.4552 seconds  (faster than isItPrime() when not using jit, but slower when using jit)
#Test 3A - The time to generate a Sieve of Eratosthenes up to 2000000, took 0.56 seconds
#Test 3B - The time to generate a Sieve of Eratosthenes up to 2000000, took 0.281 seconds (when using jit)
#Test 4 - The time to test membership of 1000000 numbers in arrayOfPrimes (the list generated by Sieve of Eratosthenes), from 1000000 to 2000000, took 0.124 seconds
#Test 5 - The time to convert arrayOfPrimes (the list generated by Sieve of Eratosthenes) to a set, took 0.171 seconds
#Test 6 - The time to test membership of 1000000 numbers in prime_set (the set generated by Sieve of Eratosthenes), from 1000000 to 2000000, took 0.454 seconds
                     
